{"version":3,"sources":["Dropdown.js","loading.js","Centervac.js","Certificate.js","App.js","reportWebVitals.js","index.js"],"names":["Dropdown","props","className","name","defaultValue","onChange","e","target","value","disabled","placeholder","stateArray","map","state","id","loading","Centervac","centerArray","center","style","fontSize","vaccine","available_capacity","min_age_limit","address","marginTop","slots","x","Math","random","Certificate","useState","setvalue","event","type","onClick","Download","App","datas","setData","citys","setCity","centers","setCenters","centerid","setCentersid","selectedDate","setDate","setLoading","useEffect","fetch","then","res","json","data","states","state_name","state_id","getCenters","date","_centers","sessions","length","alert","catch","console","log","paddingTop","districts","district_name","district_id","Date","dateFormat","getDate","getMonth","getFullYear","onclick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13d59f95.chunk.js","sourcesContent":["// whoever what to use this library, please send data as name, id\r\nfunction Dropdown(props){\r\n    const dropMenu = ()=>{\r\n      return  props.stateArray.map((state)=>{\r\n            return <option key ={state.id} value={state.id} >{state.name}</option>\r\n                \r\n        })\r\n    }\r\n    return(\r\n        <>\r\n        <select className = \"menu\"name=\"state\" defaultValue=\"\"  onChange={(e)=> props.onChange(e.target.value)}>\r\n        <option value=\"\" disabled >{props.placeholder}</option>\r\n             { dropMenu()\r\n              }\r\n        </select>\r\n        </>\r\n    )\r\n}\r\nexport default Dropdown","function loading () {\r\n    return <>\r\n    <div>\r\n        <div className = \"loading\">\r\n\r\n        </div>\r\n    </div>\r\n    </>\r\n}\r\nexport default loading","function Centervac(props){\r\n   const centers = ()=>{\r\n     return   props.centerArray.map((center)=>{\r\n            return <div className=\"card\" key = {Math.random()}>\r\n                <div>\r\n                    <span style={{fontSize: 'x-large'}}>{center.name}</span>\r\n                    <span className=\"vaccine-name\">{center.vaccine}</span>\r\n                </div>\r\n                <div className=\"section\">vaccine available for {center.available_capacity} people above {center.min_age_limit} age</div>\r\n                <div className =\"address\">In The {center.address}</div>\r\n                <div style={{marginTop:'32px'}}>{center?.slots?.map(x => <span key = {Math.random()} className=\"slot\">{x}</span>)}</div>\r\n            </div>\r\n        })\r\n   }\r\n\r\n    return(\r\n        <div>\r\n            {centers()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Centervac","import {useState,useEffect} from \"react\"\r\nfunction Certificate(props){\r\nconst [value,setvalue] = useState(\"\")\r\n    \r\n\r\nreturn (\r\n    <div className = \"certificate\">\r\n        <div>\r\n       Get your certificate\r\n        </div>\r\n       <span >\r\n        Reference_id : \r\n       <input placeholder =\"Ex:1234567890\" \r\n              onChange = {\r\n                  (event)=>{\r\n                        setvalue(event.target.value)\r\n                  }} \r\n              type =\"number\"  /> \r\n       \r\n       </span>\r\n       <div>\r\n\r\n       <button onClick  = {()=>props.Download(value)}>Download</button>\r\n       </div>\r\n    </div>\r\n)\r\n}\r\nexport default Certificate","import {useState,useEffect} from \"react\"\nimport './App.css';\nimport Dropdown from \"./Dropdown\"\nimport Loading from \"./loading\"\nimport  Centervac from \"./Centervac\"\nimport  Certificate from \"./Certificate\"\nimport { distance, getLocation } from \"./latRequest\";\n\n\nfunction App() {\n\n  const [datas,setData] = useState([])\n  const [citys,setCity] = useState([])\n  const [centers,setCenters] = useState([])\n  const [centerid,setCentersid] = useState(0)\n  const [selectedDate, setDate] = useState('');\n  const [loading,setLoading] = useState(false)\n  useEffect(()=>{\n    fetch(\"https://cdn-api.co-vin.in/api/v2/admin/location/states\")\n      .then(res => res.json())\n      .then(data => setData(data.states.map(x =>({name: x.state_name, id: x.state_id}))))\n  }, [])\n  \n  \n\n  const getDistrict =(id)=>{\n   return fetch(\"https://cdn-api.co-vin.in/api/v2/admin/location/districts/\"+id)\n    .then(res => res.json())\n    .then(citys => {\n      return(\n        setCity(citys.districts.map(x =>({name: x.district_name, id: x.district_id})))\n      )\n      \n    })\n  }\n  const getCenters =(id,date) =>{\n    // console.log(id + \" asdfgh \"+date)\n    // fetch(\"https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/findByDistrict?district_id=523&date=05-05-2021\")\n    fetch(\"https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/findByDistrict?district_id=\"+id+\"&date=\"+date)\n    .then(res => res.json())\n    .then(_centers => {\n      if(_centers.sessions.length){\n        setCenters(_centers.sessions)\n        setLoading(false)\n      }else{\n        alert(\"No centers available here\")\n\n      }\n      // return getLocation()\n      // .then(loc => {\n      //   if (loc) {\n      //     _centers.sessions.forEach(x => {\n      //       x.distance = distance(loc.coords.latitude, loc.coords.longitude, x.lat, x.long);\n      //     })\n      //     _centers.sessions.sort((a,b) => a.distance - b.distance);\n  \n      //     setCenters(_centers.sessions);\n      //   }\n      // })\n    })\n    .catch((e)=> {\n      console.log(e)\n      \n    })\n  }\n  const loadingfun = ()=>{\n    setLoading(!loading)\n  }\n  const dowloadPdf = (id)=>{\n      fetch(\"https://cdn-api.co-vin.in/api/v2/registration/certificate/public/download?beneficiary_reference_id=\"+id)\n      .then(res =>res.json())\n      .then(data=>console.log(data))\n      .catch(()=>alert(\"Pdf not genreted\"))\n  }\n  return (\n\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          Co-win Resources\n        </h1>\n      </header>\n      {/* <input  placeholder = \"DD-MM-YYYY\" type=\"date\" onChange={(e)=> {\n            console.log(e.target.value);\n            // setValue(e.target.value)\n            }}/> */}\n      <div style  ={{paddingTop:\"15px\"}}>\n        <Dropdown stateArray = {datas} \n                  onChange = {getDistrict}\n                  placeholder = \"State\"/>\n        <Dropdown stateArray = {citys} \n              onChange = {(id) => setCentersid(id)}\n              placeholder = \"District\"/> \n        \n        <input  className=\"menu\" type=\"date\" onChange={(e)=> {\n          const date = new Date(e.target.value);\n          const dateFormat = `${date.getDate()}-${date.getMonth() + 1}-${date.getFullYear()}`\n          setDate(dateFormat);\n        }}/>\n        <button className =\"menu\"onClick={() => {\n          getCenters(centerid, selectedDate)\n          loadingfun()\n        }\n          } >Go</button>    \n      </div>\n      <div>\n        {loading ? <Loading/>:<Centervac onclick ={getCenters} id = {centerid} centerArray ={centers}/>}\n        \n      </div>\n      <Certificate Download = {dowloadPdf}/> \n    </div>\n    \n      \n    \n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}